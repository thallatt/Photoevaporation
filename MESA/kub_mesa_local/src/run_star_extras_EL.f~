! ***********************************************************************
!
!   Copyright (C) 2011  Bill Paxton
!
!   this file is part of mesa.
!
!   mesa is free software; you can redistribute it and/or modify
!   it under the terms of the gnu general library public license as published
!   by the free software foundation; either version 2 of the license, or
!   (at your option) any later version.
!
!   mesa is distributed in the hope that it will be useful, 
!   but without any warranty; without even the implied warranty of
!   merchantability or fitness for a particular purpose.  see the
!   gnu library general public license for more details.
!
!   you should have received a copy of the gnu library general public license
!   along with this software; if not, write to the free software
!   foundation, inc., 59 temple place, suite 330, boston, ma 02111-1307 usa
!
! ***********************************************************************
 
      module run_star_extras

      use star_lib
      use star_def
      use const_def
      
      implicit none
      
      integer :: time0, time1, clock_rate

      contains
      
      subroutine extras_controls(id, ierr)
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         
         s% extras_startup => extras_startup
         s% extras_check_model => extras_check_model
         s% extras_finish_step => extras_finish_step
         s% extras_after_evolve => extras_after_evolve
         s% how_many_extra_history_columns => how_many_extra_history_columns
         s% data_for_extra_history_columns => data_for_extra_history_columns
         s% how_many_extra_profile_columns => how_many_extra_profile_columns
         s% data_for_extra_profile_columns => data_for_extra_profile_columns

         !turn on other mass loss routine and other energy
         s% other_adjust_mdot=> energy_limited_mdot !zero_mdot !HD_mdot !
         s% other_energy => varTEQ_energy
      end subroutine extras_controls

      !!!!!!!!mass loss!!!!!!!do not forget to change the pointer!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      subroutine energy_limited_mdot(id, ierr)
         !use star_def
         !use const_def
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         real(dp) :: eps_EUV, a, REUV, FEUV
         type (star_info), pointer :: s

         ierr = 0

         ! get the star_info pointer using id
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return

         !Give xctrl inputs more interpretable names
         eps_EUV = s% x_ctrl(2)  !mass loss efficiency factor
         a = s% x_ctrl(1)        !orbital separation (AU)
         REUV = s% x_ctrl(3) * s% photosphere_r * Rsun   !REUV (in cm)

         !FEUV flux from star (incident on the planet)
         FEUV = 29.7 * (s% star_age * 1.0e-9)**(-1.23) / a**2  ! erg cm^-2 s^-1

         !Set stellar mass loss rate with E-limited mass loss (in g/s)
         s% mstar_dot = - eps_EUV * pi * FEUV * REUV**3 / (standard_cgrav * s% mstar)

        !write(*,*) 'REUV (cm), FEUV (erg/cm/s), mstar_dot (g/s)', REUV, FEUV, s% mstar_dot

      end subroutine energy_limited_mdot

      !!!!!!!!!!!!!!!!!other heating!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      subroutine varTEQ_energy(id, ierr)
         use const_def, only: Rsun
         integer, intent(in) :: id
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         integer :: k
         real(dp) :: Rpl_RE, Mpl_ME
         real(dp) :: ei_time, ei_lbol, ei_teff, ei_rstar, sage, Lstar
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
               
         s% extra_heat(:) = s% extra_power_source

         open(unit = 12, file = "ev_inp/eho100.dat", status = 'old', action = "read")
         !log10(age [years]) log10(Lbol [Lsun]) log10(Teff [K]) log10(Rstar [Rsun])

         ei_time = 0.0
         sage = s% star_age !in years

         DO WHILE (sage .gt. 10.0 ** ei_time)
            read(12, 110) ei_time, ei_lbol, ei_teff, ei_rstar
            !write(*,*) 'hohohohohohohohohohoho', 10**ei_time, sage
         END DO

110      format(4(3X, F10.6))
         

         Lstar = (10.0**ei_lbol) * 3.9d33/4.0/s% x_ctrl(1)/s% x_ctrl(1)/2.238d26
         !write(*,*) 'hohohohohohohohohohoho', Lstar
         
         close(unit = 12)

         Rpl_RE = (10.**(s% log_surface_radius)) * 6.96d10 / 6.378d8
         Mpl_ME = ((s% star_mass * 1.9885d33) - s% M_center) / 5.9722d27

         !dM = 5.9722d27 !MEARTH
         do k = 1, 10 !s% nz            
            s% irradiation_heat(k) = 3.14* Lstar * (Rpl_RE**2) / Mpl_ME !1.36d8 !*2.0
         end do


         return
      end subroutine varTEQ_energy

      !!!!!!!!!!!!touch nothing below!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      
      integer function extras_startup(id, restart, ierr)
         integer, intent(in) :: id
         logical, intent(in) :: restart
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_startup = 0
         call system_clock(time0,clock_rate)
         if (.not. restart) then
            call alloc_extra_info(s)
         else ! it is a restart
            call unpack_extra_info(s)
         end if
      end function extras_startup
      
      
      subroutine extras_after_evolve(id, id_extra, ierr)
         integer, intent(in) :: id, id_extra
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         real(dp) :: dt
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         call system_clock(time1,clock_rate)
         dt = dble(time1 - time0) / clock_rate / 60
         write(*,'(/,a50,f12.2,99i10/)') 'runtime (minutes), retries, backups, steps', &
            dt, s% num_retries, s% num_backups, s% model_number
         ierr = 0
      end subroutine extras_after_evolve
      

      ! returns either keep_going, retry, backup, or terminate.
      integer function extras_check_model(id, id_extra)
         integer, intent(in) :: id, id_extra
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_check_model = keep_going         
      end function extras_check_model


      integer function how_many_extra_history_columns(id, id_extra)
         integer, intent(in) :: id, id_extra
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_history_columns = 4
      end function how_many_extra_history_columns
      
      
      subroutine data_for_extra_history_columns(id, id_extra, n, names, vals, ierr)
         !use const_def
         integer, intent(in) :: id, id_extra, n
         character (len=maxlen_history_column_name) :: names(n)
         real(dp) :: vals(n)
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         real(dp) :: mp_m


         call star_ptr(id, s, ierr)
         if (ierr /= 0) return


         ! column 1 planet mass in Earth masses
         names(1) = "mp_mearth"
         vals(1) = s% m(1)/m_earth

         ! column 2 planet radius in Earth radii
         names(2) = "rp_rearth"
         vals(2) = s% r(1)/r_earth

         ! column 3: envelope mass fraction
         names(3) = "f_env"
         vals(3) = (s% m(1) - s% M_center) / s% m(1)

         ! column 4: mean planet density (in g/cm^3)
         names(4) = "rho_ave"
         vals(4) =  s% m(1) / (pi4/3d0 * (s% r(1))**3 )

         ierr = 0
      end subroutine data_for_extra_history_columns

      
      integer function how_many_extra_profile_columns(id, id_extra)
         use star_def, only: star_info
         integer, intent(in) :: id, id_extra
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         how_many_extra_profile_columns = 0
      end function how_many_extra_profile_columns
      
      
      subroutine data_for_extra_profile_columns(id, id_extra, n, nz, names, vals, ierr)
         use star_def, only: star_info, maxlen_profile_column_name
         use const_def, only: dp
         integer, intent(in) :: id, id_extra, n, nz
         character (len=maxlen_profile_column_name) :: names(n)
         real(dp) :: vals(nz,n)
         integer, intent(out) :: ierr
         type (star_info), pointer :: s
         integer :: k
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
      end subroutine data_for_extra_profile_columns
      

      ! returns either keep_going or terminate.
      integer function extras_finish_step(id, id_extra)
         integer, intent(in) :: id, id_extra
         integer :: ierr
         type (star_info), pointer :: s
         ierr = 0
         call star_ptr(id, s, ierr)
         if (ierr /= 0) return
         extras_finish_step = keep_going
         call store_extra_info(s)
      end function extras_finish_step
      
      
      ! routines for saving and restoring extra data so can do restarts
         
         ! put these defs at the top and delete from the following routines
         !integer, parameter :: extra_info_alloc = 1
         !integer, parameter :: extra_info_get = 2
         !integer, parameter :: extra_info_put = 3
      
      
      subroutine alloc_extra_info(s)
         integer, parameter :: extra_info_alloc = 1
         type (star_info), pointer :: s
         call move_extra_info(s,extra_info_alloc)
      end subroutine alloc_extra_info
      
      
      subroutine unpack_extra_info(s)
         integer, parameter :: extra_info_get = 2
         type (star_info), pointer :: s
         call move_extra_info(s,extra_info_get)
      end subroutine unpack_extra_info
      
      
      subroutine store_extra_info(s)
         integer, parameter :: extra_info_put = 3
         type (star_info), pointer :: s
         call move_extra_info(s,extra_info_put)
      end subroutine store_extra_info
      
      
      subroutine move_extra_info(s,op)
         integer, parameter :: extra_info_alloc = 1
         integer, parameter :: extra_info_get = 2
         integer, parameter :: extra_info_put = 3
         type (star_info), pointer :: s
         integer, intent(in) :: op
         
         integer :: i, j, num_ints, num_dbls, ierr
         
         i = 0
         ! call move_int or move_flg    
         num_ints = i
         
         i = 0
         ! call move_dbl       
         
         num_dbls = i
         
         if (op /= extra_info_alloc) return
         if (num_ints == 0 .and. num_dbls == 0) return
         
         ierr = 0
         call star_alloc_extras(s% id, num_ints, num_dbls, ierr)
         if (ierr /= 0) then
            write(*,*) 'failed in star_alloc_extras'
            write(*,*) 'alloc_extras num_ints', num_ints
            write(*,*) 'alloc_extras num_dbls', num_dbls
            stop 1
         end if
         
         contains
         
         subroutine move_dbl(dbl)
            real(dp) :: dbl
            i = i+1
            select case (op)
            case (extra_info_get)
               dbl = s% extra_work(i)
            case (extra_info_put)
               s% extra_work(i) = dbl
            end select
         end subroutine move_dbl
         
         subroutine move_int(int)
            integer :: int
            i = i+1
            select case (op)
            case (extra_info_get)
               int = s% extra_iwork(i)
            case (extra_info_put)
               s% extra_iwork(i) = int
            end select
         end subroutine move_int
         
         subroutine move_flg(flg)
            logical :: flg
            i = i+1
            select case (op)
            case (extra_info_get)
               flg = (s% extra_iwork(i) /= 0)
            case (extra_info_put)
               if (flg) then
                  s% extra_iwork(i) = 1
               else
                  s% extra_iwork(i) = 0
               end if
            end select
         end subroutine move_flg
      
      end subroutine move_extra_info

      end module run_star_extras
      
